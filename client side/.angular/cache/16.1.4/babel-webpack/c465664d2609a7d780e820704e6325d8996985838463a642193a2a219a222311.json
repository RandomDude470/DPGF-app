{"ast":null,"code":"import { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.AUTH_API_ROUTE = \"http://127.0.0.1:5050/auth\";\n  }\n  Login(data) {\n    const evaluateResp = resp => {\n      let response = resp;\n      return [response[\"token\"], \"success\"];\n    };\n    const OnError = err => {\n      console.log(err.status);\n      if (err.status == 401) {\n        return [\"Incorrect email or password\", \"error\"];\n      } else if (err.status == 404) {\n        return [\"Url not found Check url Spelling\", \"error\"];\n      } else if (err.status == 0) {\n        return [\"Couldnt send Request\", \"error\"];\n      } else {\n        return [\"enternal server error\", \"error\"];\n      }\n    };\n    return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/login`, JSON.stringify(data), {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    })).then(evaluateResp).catch(OnError);\n  }\n  Validate(Object) {\n    const sendRequest = () => {\n      return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/validate`, JSON.stringify(Object), {\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      }));\n    };\n    const validateResponse = res => {\n      let record = res;\n      if (record[\"status\"] == \"success\") {\n        return true;\n      } else {\n        return false;\n      }\n    };\n    const OnError = err => {\n      console.log(err.status);\n      return false;\n    };\n    return sendRequest().then(validateResponse).catch(OnError);\n  }\n  Register(Object) {\n    const sendRequest = () => {\n      return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/validate`, JSON.stringify(Object), {\n        headers: {\n          'content-type': 'application/json'\n        }\n      }));\n    };\n    const validateResponse = Object => {\n      let record = Object;\n      return [record['token'], 'success'];\n    };\n    const OnError = err => {\n      if (err.status == 409) {\n        return ['Email already in use', 'error'];\n      } else {\n        return ['server error', 'error'];\n      }\n    };\n    return sendRequest().then(validateResponse).catch(OnError);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["firstValueFrom","AuthService","constructor","http","AUTH_API_ROUTE","Login","data","evaluateResp","resp","response","OnError","err","console","log","status","post","JSON","stringify","headers","then","catch","Validate","Object","sendRequest","validateResponse","res","record","Register","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Yassir\\Desktop\\web\\Angular-test\\aglo-clone\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse }from '@angular/common/http'\nimport { Observable ,tap,firstValueFrom} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private AUTH_API_ROUTE:string = \"http://127.0.0.1:5050/auth\";\n\n  constructor(private http : HttpClient) { }\n\n  Login( data : Record<string,string>){\n    \n    const evaluateResp = (resp : Object)=>{\n      let response = resp as Record<string,string>\n      return [response[\"token\"],\"success\"]\n      \n\n    }\n    const OnError = (err : HttpErrorResponse)=>{\n      console.log(err.status);\n      if (err.status == 401) {\n        return [\"Incorrect email or password\",\"error\"]\n      }\n      else if (err.status == 404){\n        return [\"Url not found Check url Spelling\",\"error\"]\n      }else if(err.status == 0){\n        return [\"Couldnt send Request\",\"error\"]\n      }\n      else{\n        return [\"enternal server error\",\"error\"]\n      }\n    }\n\n    return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/login`,JSON.stringify(data),{headers : {\"Content-type\" : \"application/json\"}}))\n          .then(evaluateResp)\n          .catch(OnError)\n\n    \n      \n\n    \n  }\n  Validate(Object : Record<string,string>) : Promise<boolean>{\n    const sendRequest = ()=>{\n      return firstValueFrom (this.http.post(`${this.AUTH_API_ROUTE}/validate`,JSON.stringify(Object),{headers : {\"Content-type\" : \"application/json\"}}))\n\n    }\n    const validateResponse= (res : Object)=>{\n      let record = res as Record<string,string>\n      if (record[\"status\"] == \"success\") {\n        return true\n      }\n      else{\n        return false\n      }\n    }\n    const OnError = (err : HttpErrorResponse)=>{\n      console.log(err.status);\n      return false\n      \n    }\n    return sendRequest()\n    .then(validateResponse)\n    .catch(OnError)\n          \n  }\n  Register(Object : Record<string,string>){\n    const sendRequest = ()=>{\n      return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/validate`,JSON.stringify(Object),{headers : { 'content-type' : 'application/json'}}))\n    }\n    const validateResponse = (Object : Object)=>{\n      let record = Object as Record<string,string>\n      return [record['token'],'success']\n      \n    }\n    const OnError = (err : HttpErrorResponse)=>{\n      \n      if (err.status == 409) {\n        return ['Email already in use','error']\n      } else  {\n        return ['server error','error']\n      }\n    }\n    return sendRequest()\n    .then(validateResponse)\n    .catch(OnError)\n\n  }\n}\n"],"mappings":"AAEA,SAAyBA,cAAc,QAAO,MAAM;;;AAKpD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,cAAc,GAAU,4BAA4B;EAEnB;EAEzCC,KAAKA,CAAEC,IAA4B;IAEjC,MAAMC,YAAY,GAAIC,IAAa,IAAG;MACpC,IAAIC,QAAQ,GAAGD,IAA6B;MAC5C,OAAO,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAC,SAAS,CAAC;IAGtC,CAAC;IACD,MAAMC,OAAO,GAAIC,GAAuB,IAAG;MACzCC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,MAAM,CAAC;MACvB,IAAIH,GAAG,CAACG,MAAM,IAAI,GAAG,EAAE;QACrB,OAAO,CAAC,6BAA6B,EAAC,OAAO,CAAC;OAC/C,MACI,IAAIH,GAAG,CAACG,MAAM,IAAI,GAAG,EAAC;QACzB,OAAO,CAAC,kCAAkC,EAAC,OAAO,CAAC;OACpD,MAAK,IAAGH,GAAG,CAACG,MAAM,IAAI,CAAC,EAAC;QACvB,OAAO,CAAC,sBAAsB,EAAC,OAAO,CAAC;OACxC,MACG;QACF,OAAO,CAAC,uBAAuB,EAAC,OAAO,CAAC;;IAE5C,CAAC;IAED,OAAOd,cAAc,CAAC,IAAI,CAACG,IAAI,CAACY,IAAI,CAAC,GAAG,IAAI,CAACX,cAAc,QAAQ,EAACY,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,EAAC;MAACY,OAAO,EAAG;QAAC,cAAc,EAAG;MAAkB;IAAC,CAAC,CAAC,CAAC,CACrIC,IAAI,CAACZ,YAAY,CAAC,CAClBa,KAAK,CAACV,OAAO,CAAC;EAMvB;EACAW,QAAQA,CAACC,MAA8B;IACrC,MAAMC,WAAW,GAAGA,CAAA,KAAI;MACtB,OAAOvB,cAAc,CAAE,IAAI,CAACG,IAAI,CAACY,IAAI,CAAC,GAAG,IAAI,CAACX,cAAc,WAAW,EAACY,IAAI,CAACC,SAAS,CAACK,MAAM,CAAC,EAAC;QAACJ,OAAO,EAAG;UAAC,cAAc,EAAG;QAAkB;MAAC,CAAC,CAAC,CAAC;IAEpJ,CAAC;IACD,MAAMM,gBAAgB,GAAGC,GAAY,IAAG;MACtC,IAAIC,MAAM,GAAGD,GAA4B;MACzC,IAAIC,MAAM,CAAC,QAAQ,CAAC,IAAI,SAAS,EAAE;QACjC,OAAO,IAAI;OACZ,MACG;QACF,OAAO,KAAK;;IAEhB,CAAC;IACD,MAAMhB,OAAO,GAAIC,GAAuB,IAAG;MACzCC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,MAAM,CAAC;MACvB,OAAO,KAAK;IAEd,CAAC;IACD,OAAOS,WAAW,EAAE,CACnBJ,IAAI,CAACK,gBAAgB,CAAC,CACtBJ,KAAK,CAACV,OAAO,CAAC;EAEjB;EACAiB,QAAQA,CAACL,MAA8B;IACrC,MAAMC,WAAW,GAAGA,CAAA,KAAI;MACtB,OAAOvB,cAAc,CAAC,IAAI,CAACG,IAAI,CAACY,IAAI,CAAC,GAAG,IAAI,CAACX,cAAc,WAAW,EAACY,IAAI,CAACC,SAAS,CAACK,MAAM,CAAC,EAAC;QAACJ,OAAO,EAAG;UAAE,cAAc,EAAG;QAAkB;MAAC,CAAC,CAAC,CAAC;IACpJ,CAAC;IACD,MAAMM,gBAAgB,GAAIF,MAAe,IAAG;MAC1C,IAAII,MAAM,GAAGJ,MAA+B;MAC5C,OAAO,CAACI,MAAM,CAAC,OAAO,CAAC,EAAC,SAAS,CAAC;IAEpC,CAAC;IACD,MAAMhB,OAAO,GAAIC,GAAuB,IAAG;MAEzC,IAAIA,GAAG,CAACG,MAAM,IAAI,GAAG,EAAE;QACrB,OAAO,CAAC,sBAAsB,EAAC,OAAO,CAAC;OACxC,MAAO;QACN,OAAO,CAAC,cAAc,EAAC,OAAO,CAAC;;IAEnC,CAAC;IACD,OAAOS,WAAW,EAAE,CACnBJ,IAAI,CAACK,gBAAgB,CAAC,CACtBJ,KAAK,CAACV,OAAO,CAAC;EAEjB;;AAnFWT,WAAW,C;mBAAXA,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX9B,WAAW,C;SAAXA,WAAW;EAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}