{"ast":null,"code":"import { firstValueFrom, catchError, map, from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.AUTH_API_ROUTE = \"http://127.0.0.1:5050/auth\";\n  }\n  Login(data) {\n    return this.http.post(`${this.AUTH_API_ROUTE}/login`, JSON.stringify(data), {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }).pipe(map(resp => {\n      let response = resp;\n      return [response[\"token\"], \"success\"];\n    }), catchError(err => {\n      console.log(err.status);\n      if (err.status == 401) {\n        return from([\"Incorrect email or password\", \"error\"]);\n      } else if (err.status == 404) {\n        return from([\"Url not found Check url Spelling\", \"error\"]);\n      } else if (err.status == 0) {\n        return from([\"Couldnt send Request\", \"error\"]);\n      } else {\n        return from([\"enternal server error\", \"error\"]);\n      }\n    }));\n    // const evaluateResp = (resp : Object)=>{\n    //   let response = resp as Record<string,string>\n    //   return [response[\"token\"],\"success\"]\n    // }\n    // const OnError = (err : HttpErrorResponse)=>{\n    //   console.log(err.status);\n    //   if (err.status == 401) {\n    //     return [\"Incorrect email or password\",\"error\"]\n    //   }\n    //   else if (err.status == 404){\n    //     return [\"Url not found Check url Spelling\",\"error\"]\n    //   }else if(err.status == 0){\n    //     return [\"Couldnt send Request\",\"error\"]\n    //   }\n    //   else{\n    //     return [\"enternal server error\",\"error\"]\n    //   }\n    // }\n    // return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/login`,JSON.stringify(data),{headers : {\"Content-type\" : \"application/json\"}}))\n    //       .then(evaluateResp)\n    //       .catch(OnError)\n  }\n\n  Validate(Object) {\n    const sendRequest = () => {\n      return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/validate`, JSON.stringify(Object), {\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      }));\n    };\n    const validateResponse = res => {\n      let record = res;\n      if (record[\"status\"] == \"success\") {\n        return true;\n      } else {\n        return false;\n      }\n    };\n    const OnError = err => {\n      console.log(err.status);\n      return false;\n    };\n    return sendRequest().then(validateResponse).catch(OnError);\n  }\n  Register(Object) {\n    const sendRequest = () => {\n      return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/validate`, JSON.stringify(Object), {\n        headers: {\n          'content-type': 'application/json'\n        }\n      }));\n    };\n    const validateResponse = Object => {\n      let record = Object;\n      return [record['token'], 'success'];\n    };\n    const OnError = err => {\n      if (err.status == 409) {\n        return ['Email already in use', 'error'];\n      } else {\n        return ['server error', 'error'];\n      }\n    };\n    return sendRequest().then(validateResponse).catch(OnError);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["firstValueFrom","catchError","map","from","AuthService","constructor","http","AUTH_API_ROUTE","Login","data","post","JSON","stringify","headers","pipe","resp","response","err","console","log","status","Validate","Object","sendRequest","validateResponse","res","record","OnError","then","catch","Register","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Yassir\\Desktop\\web\\Angular-test\\aglo-clone\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse }from '@angular/common/http'\r\nimport { Observable ,tap,firstValueFrom, catchError, map, from} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private AUTH_API_ROUTE:string = \"http://127.0.0.1:5050/auth\";\r\n\r\n  constructor(private http : HttpClient) { }\r\n\r\n  Login( data : Record<string,string>){\r\n\r\n    return this.http.post(`${this.AUTH_API_ROUTE}/login`,JSON.stringify(data),{headers : {\"Content-type\" : \"application/json\"}})\r\n    \r\n    .pipe(\r\n      map((resp)=>{\r\n        let response = resp as Record<string,string>\r\n        return [response[\"token\"],\"success\"]\r\n      }),\r\n      catchError((err : HttpErrorResponse)=>{\r\n        console.log(err.status);\r\n      if (err.status == 401) {\r\n        return from([\"Incorrect email or password\",\"error\"])\r\n      }\r\n      else if (err.status == 404){\r\n        return from([\"Url not found Check url Spelling\",\"error\"])\r\n      }else if(err.status == 0){\r\n        return from([\"Couldnt send Request\",\"error\"])\r\n      }\r\n      else{\r\n        return from([\"enternal server error\",\"error\"])\r\n      }\r\n      })\r\n    )\r\n    \r\n    \r\n    \r\n    // const evaluateResp = (resp : Object)=>{\r\n    //   let response = resp as Record<string,string>\r\n    //   return [response[\"token\"],\"success\"]\r\n      \r\n\r\n    // }\r\n    // const OnError = (err : HttpErrorResponse)=>{\r\n    //   console.log(err.status);\r\n    //   if (err.status == 401) {\r\n    //     return [\"Incorrect email or password\",\"error\"]\r\n    //   }\r\n    //   else if (err.status == 404){\r\n    //     return [\"Url not found Check url Spelling\",\"error\"]\r\n    //   }else if(err.status == 0){\r\n    //     return [\"Couldnt send Request\",\"error\"]\r\n    //   }\r\n    //   else{\r\n    //     return [\"enternal server error\",\"error\"]\r\n    //   }\r\n    // }\r\n\r\n    // return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/login`,JSON.stringify(data),{headers : {\"Content-type\" : \"application/json\"}}))\r\n    //       .then(evaluateResp)\r\n    //       .catch(OnError)\r\n\r\n    \r\n      \r\n\r\n    \r\n  }\r\n\r\n\r\n  Validate(Object : Record<string,string>) : Promise<boolean>{\r\n    const sendRequest = ()=>{\r\n      return firstValueFrom (this.http.post(`${this.AUTH_API_ROUTE}/validate`,JSON.stringify(Object),{headers : {\"Content-type\" : \"application/json\"}}))\r\n\r\n    }\r\n    const validateResponse= (res : Object)=>{\r\n      let record = res as Record<string,string>\r\n      if (record[\"status\"] == \"success\") {\r\n        return true\r\n      }\r\n      else{\r\n        return false\r\n      }\r\n    }\r\n    const OnError = (err : HttpErrorResponse)=>{\r\n      console.log(err.status);\r\n      return false\r\n      \r\n    }\r\n    return sendRequest()\r\n    .then(validateResponse)\r\n    .catch(OnError)\r\n          \r\n  }\r\n  Register(Object : Record<string,string>){\r\n    const sendRequest = ()=>{\r\n      return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/validate`,JSON.stringify(Object),{headers : { 'content-type' : 'application/json'}}))\r\n    }\r\n    const validateResponse = (Object : Object)=>{\r\n      let record = Object as Record<string,string>\r\n      return [record['token'],'success']\r\n      \r\n    }\r\n    const OnError = (err : HttpErrorResponse)=>{\r\n      \r\n      if (err.status == 409) {\r\n        return ['Email already in use','error']\r\n      } else  {\r\n        return ['server error','error']\r\n      }\r\n    }\r\n    return sendRequest()\r\n    .then(validateResponse)\r\n    .catch(OnError)\r\n\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}