{"ast":null,"code":"import { catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DpgfService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://127.0.0.1:5050/dpgf/';\n    this.token = localStorage.getItem('TOKEN');\n  }\n  getListOfLotsByDpgfId(id) {\n    return this.http.post(this.url + 'getListOfLots', {\n      id\n    }, {\n      headers: {\n        'content-type': 'application/json',\n        'authorization': this.token\n      }\n    }).pipe(map(res => {\n      let record = res;\n      return record;\n    }), catchError(err => {\n      console.log(err.status);\n      return of(err.status);\n    }));\n  }\n  getDpgf(id) {\n    return this.http.post(this.url + 'getDpgf', {\n      id\n    }, {\n      headers: {\n        'content-type': 'application/json',\n        'authorization': this.token\n      }\n    }).pipe(map(obj => {\n      return obj;\n    }), catchError(err => {\n      if (err.status == 400) {\n        return of(400);\n      } else {\n        return of(500);\n      }\n    }));\n  }\n  SaveDPGF(dpgf) {}\n}\nDpgfService.ɵfac = function DpgfService_Factory(t) {\n  return new (t || DpgfService)(i0.ɵɵinject(i1.HttpClient));\n};\nDpgfService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DpgfService,\n  factory: DpgfService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","of","DpgfService","constructor","http","url","token","localStorage","getItem","getListOfLotsByDpgfId","id","post","headers","pipe","res","record","err","console","log","status","getDpgf","obj","SaveDPGF","dpgf","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Yassir\\Desktop\\web\\Angular-test\\aglo-clone\\src\\app\\Services\\dpgf.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, map, of } from 'rxjs';\nimport { dpgf } from '../dpgf/main/main.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpgfService {\n\n  url = 'http://127.0.0.1:5050/dpgf/'\n  token = localStorage.getItem('TOKEN')\n\n  constructor(private http : HttpClient) { }\n  \n\n  getListOfLotsByDpgfId (id : string | null) {\n    \n    \n    return this.http.post(this.url + 'getListOfLots',{id},{headers : {'content-type' : 'application/json' , 'authorization' : this.token as string}})\n    .pipe(\n      map((res)=>{\n        let record  = res as  {lots : Array<Record<string,string>>}\n        return record\n      }),\n      catchError((err : HttpErrorResponse)=>{\n        console.log(err.status);\n        return of(err.status)\n        \n      })\n    )\n   }\n  getDpgf(id :string){\n    return this.http.post(this.url + 'getDpgf',{id},{headers : {'content-type' : 'application/json' , 'authorization' : this.token as string}})\n    .pipe(\n      map((obj)=>{\n        return obj as Record<string,string | Array<Record<string , string | Array<Record<string , string | Array<Record<string , string>>>>>>>\n      }),\n      catchError((err : HttpErrorResponse)=>{\n        if (err.status == 400){\n          return of(400)\n        }else{\n          return of(500)\n        }\n      })\n    )\n   }\n  SaveDPGF(dpgf : dpgf){\n    \n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,EAAEC,EAAE,QAAQ,MAAM;;;AAM1C,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,GAAG,GAAG,6BAA6B;IACnC,KAAAC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAEI;EAGzCC,qBAAqBA,CAAEC,EAAkB;IAGvC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,IAAI,CAACN,GAAG,GAAG,eAAe,EAAC;MAACK;IAAE,CAAC,EAAC;MAACE,OAAO,EAAG;QAAC,cAAc,EAAG,kBAAkB;QAAG,eAAe,EAAG,IAAI,CAACN;MAAe;IAAC,CAAC,CAAC,CAChJO,IAAI,CACHb,GAAG,CAAEc,GAAG,IAAG;MACT,IAAIC,MAAM,GAAID,GAA6C;MAC3D,OAAOC,MAAM;IACf,CAAC,CAAC,EACFhB,UAAU,CAAEiB,GAAuB,IAAG;MACpCC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,MAAM,CAAC;MACvB,OAAOlB,EAAE,CAACe,GAAG,CAACG,MAAM,CAAC;IAEvB,CAAC,CAAC,CACH;EACF;EACDC,OAAOA,CAACV,EAAU;IAChB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,IAAI,CAACN,GAAG,GAAG,SAAS,EAAC;MAACK;IAAE,CAAC,EAAC;MAACE,OAAO,EAAG;QAAC,cAAc,EAAG,kBAAkB;QAAG,eAAe,EAAG,IAAI,CAACN;MAAe;IAAC,CAAC,CAAC,CAC1IO,IAAI,CACHb,GAAG,CAAEqB,GAAG,IAAG;MACT,OAAOA,GAA+H;IACxI,CAAC,CAAC,EACFtB,UAAU,CAAEiB,GAAuB,IAAG;MACpC,IAAIA,GAAG,CAACG,MAAM,IAAI,GAAG,EAAC;QACpB,OAAOlB,EAAE,CAAC,GAAG,CAAC;OACf,MAAI;QACH,OAAOA,EAAE,CAAC,GAAG,CAAC;;IAElB,CAAC,CAAC,CACH;EACF;EACDqB,QAAQA,CAACC,IAAW,GAEpB;;AAzCWrB,WAAW,C;mBAAXA,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXzB,WAAW,C;SAAXA,WAAW;EAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}