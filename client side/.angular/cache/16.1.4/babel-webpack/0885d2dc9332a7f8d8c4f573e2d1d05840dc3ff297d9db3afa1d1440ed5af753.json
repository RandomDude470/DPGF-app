{"ast":null,"code":"import { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { inject } from \"@angular/core\";\nimport { AuthService } from '../Services/auth.service';\nimport { tap } from 'rxjs';\nexport const loginGuard = (route, state) => {\n  const cookie = inject(CookieService);\n  const auth = inject(AuthService);\n  const router = inject(Router);\n  /// Use LOcalStorage instead of cookies\n  //use observables \n  // lazy loading\n  //  each module has its own routing\n  let token = localStorage.getItem(\"TOKEN\");\n  console.log(`cookie from auth guard  : ${token}`);\n  let Observable = auth.Validate({\n    \"token\": token\n  });\n  return Observable.pipe(tap(res => {\n    console.log('boolean : ' + res);\n    if (res) {\n      return true;\n    } else {\n      console.log('fsdsfsd');\n      router.navigate([\"/auth/login\"]);\n      return false;\n    }\n  }));\n  // return auth.Validate({\"token\" : token})\n  // .subscribe((res)=>{\n  //   if (res == true) {\n  //     return true\n  //   }else{\n  //     router.navigate([\"/auth/login\"])\n  //     return false\n  //   }\n  // });\n};","map":{"version":3,"names":["Router","CookieService","inject","AuthService","tap","loginGuard","route","state","cookie","auth","router","token","localStorage","getItem","console","log","Observable","Validate","pipe","res","navigate"],"sources":["C:\\Users\\Yassir\\Desktop\\web\\Angular-test\\aglo-clone\\src\\app\\auth\\login.guard.ts"],"sourcesContent":["import { CanActivateFn, Router } from '@angular/router';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport {inject} from \"@angular/core\"\r\nimport { AuthService } from '../Services/auth.service';\r\nimport { tap } from 'rxjs';\r\n\r\nexport const loginGuard: CanActivateFn = (route, state) => {\r\n  const cookie = inject(CookieService)\r\n  const auth = inject(AuthService)\r\n  const router = inject(Router)\r\n\r\n  /// Use LOcalStorage instead of cookies\r\n  //use observables \r\n  // lazy loading\r\n  //  each module has its own routing\r\n  let token = localStorage.getItem(\"TOKEN\") as string\r\n  console.log(`cookie from auth guard  : ${token}`);\r\n  let Observable = auth.Validate({\"token\" : token})\r\n  return Observable.pipe(\r\n    tap((res)=>{\r\n      console.log('boolean : '+res);\r\n      \r\n      if (res) {\r\n        return true\r\n      } else {\r\n        console.log('fsdsfsd');\r\n        router.navigate([\"/auth/login\"])\r\n        return false\r\n      }\r\n    })\r\n  )\r\n  \r\n\r\n  // return auth.Validate({\"token\" : token})\r\n  // .subscribe((res)=>{\r\n  //   if (res == true) {\r\n  //     return true\r\n  //   }else{\r\n  //     router.navigate([\"/auth/login\"])\r\n  //     return false\r\n  //   }\r\n  // });\r\n    \r\n  \r\n};\r\n"],"mappings":"AAAA,SAAwBA,MAAM,QAAQ,iBAAiB;AACvD,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAAQC,MAAM,QAAO,eAAe;AACpC,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,GAAG,QAAQ,MAAM;AAE1B,OAAO,MAAMC,UAAU,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACxD,MAAMC,MAAM,GAAGN,MAAM,CAACD,aAAa,CAAC;EACpC,MAAMQ,IAAI,GAAGP,MAAM,CAACC,WAAW,CAAC;EAChC,MAAMO,MAAM,GAAGR,MAAM,CAACF,MAAM,CAAC;EAE7B;EACA;EACA;EACA;EACA,IAAIW,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAW;EACnDC,OAAO,CAACC,GAAG,CAAC,6BAA6BJ,KAAK,EAAE,CAAC;EACjD,IAAIK,UAAU,GAAGP,IAAI,CAACQ,QAAQ,CAAC;IAAC,OAAO,EAAGN;EAAK,CAAC,CAAC;EACjD,OAAOK,UAAU,CAACE,IAAI,CACpBd,GAAG,CAAEe,GAAG,IAAG;IACTL,OAAO,CAACC,GAAG,CAAC,YAAY,GAACI,GAAG,CAAC;IAE7B,IAAIA,GAAG,EAAE;MACP,OAAO,IAAI;KACZ,MAAM;MACLL,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtBL,MAAM,CAACU,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB,CAAC,CAAC,CACH;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAGF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}