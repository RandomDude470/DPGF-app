{"ast":null,"code":"import { catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.AUTH_API_ROUTE = \"http://127.0.0.1:5050/auth\";\n  }\n  Login(data) {\n    return this.http.post(`${this.AUTH_API_ROUTE}/login`, JSON.stringify(data), {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }).pipe(map(resp => {\n      let response = resp;\n      return [response[\"token\"], \"success\"];\n    }), catchError(err => {\n      console.log(err.status);\n      if (err.status == 401) {\n        return of([\"Incorrect email or password\", \"error\"]);\n      } else if (err.status == 404) {\n        return of([\"Url not found Check url Spelling\", \"error\"]);\n      } else if (err.status == 0) {\n        return of([\"Couldnt send Request\", \"error\"]);\n      } else {\n        return of([\"enternal server error\", \"error\"]);\n      }\n    }));\n  }\n  Validate(Object) {\n    return this.http.post(`${this.AUTH_API_ROUTE}/validate`, JSON.stringify(Object), {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }).pipe(map(res => {\n      let record = res;\n      if (record[\"status\"] == \"success\") {\n        return true;\n      } else {\n        return false;\n      }\n    }), catchError(err => {\n      console.log(err.status);\n      return of(false);\n    }));\n  }\n  Register(Object) {\n    return this.http.post(`${this.AUTH_API_ROUTE}/register`, JSON.stringify(Object), {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }).pipe(map(resp => {\n      let response = resp;\n      return [response[\"token\"], \"success\"];\n    }), catchError(err => {\n      console.log(err.status);\n      if (err.status == 409) {\n        return of(['Email already in use', 'error']);\n      } else {\n        return of(['server error', 'error']);\n      }\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","of","AuthService","constructor","http","AUTH_API_ROUTE","Login","data","post","JSON","stringify","headers","pipe","resp","response","err","console","log","status","Validate","Object","res","record","Register","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Yassir\\Desktop\\web\\Angular-test\\aglo-clone\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse }from '@angular/common/http'\r\nimport { Observable ,tap,firstValueFrom, catchError, map, from, of} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root' \r\n})\r\nexport class AuthService {\r\n\r\n  private AUTH_API_ROUTE:string = \"http://127.0.0.1:5050/auth\";\r\n\r\n  constructor(private http : HttpClient) { }\r\n\r\n  Login( data : Record<string,string>){\r\n\r\n    return this.http.post(`${this.AUTH_API_ROUTE}/login`,JSON.stringify(data),{headers : {\"Content-type\" : \"application/json\"}})\r\n    \r\n    .pipe(\r\n      map((resp)=>{\r\n        let response = resp as Record<string,string>\r\n        return [response[\"token\"],\"success\"]\r\n      }),\r\n      catchError((err : HttpErrorResponse)=>{\r\n        console.log(err.status);\r\n      if (err.status == 401) {\r\n        return of([\"Incorrect email or password\",\"error\"])\r\n      }\r\n      else if (err.status == 404){\r\n        return of([\"Url not found Check url Spelling\",\"error\"])\r\n      }else if(err.status == 0){\r\n        return of([\"Couldnt send Request\",\"error\"])\r\n      }\r\n      else{\r\n        return of([\"enternal server error\",\"error\"])\r\n      }\r\n      })\r\n    )\r\n    \r\n    \r\n    \r\n    \r\n    \r\n      \r\n\r\n    \r\n  }\r\n\r\n\r\n  Validate(Object : Record<string,string>) : Observable<boolean>{\r\n    return this.http.post(`${this.AUTH_API_ROUTE}/validate`,JSON.stringify(Object),{headers : {\"Content-type\" : \"application/json\"}})\r\n    .pipe(\r\n      map((res)=>{\r\n        let record = res as Record<string,string>\r\n        if (record[\"status\"] == \"success\") {\r\n          return true\r\n        }\r\n        else{\r\n          return false\r\n        }\r\n      }),\r\n      catchError((err : HttpErrorResponse)=>{\r\n        console.log(err.status);\r\n        return of(false)\r\n      })\r\n    )\r\n}\r\n\r\n\r\n\r\n  Register(Object : Record<string,string>){\r\n\r\n    return this.http.post(`${this.AUTH_API_ROUTE}/register`,JSON.stringify(Object),{headers : {\"Content-type\" : \"application/json\"}})\r\n    \r\n    .pipe(\r\n      map((resp)=>{\r\n        let response = resp as Record<string,string>\r\n        return [response[\"token\"],\"success\"]\r\n      }),\r\n      catchError((err : HttpErrorResponse)=>{\r\n        console.log(err.status);\r\n        if (err.status == 409) {\r\n          return of(['Email already in use','error'])\r\n        } else  {\r\n          return of(['server error','error'])\r\n        }\r\n      })\r\n    )\r\n\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}