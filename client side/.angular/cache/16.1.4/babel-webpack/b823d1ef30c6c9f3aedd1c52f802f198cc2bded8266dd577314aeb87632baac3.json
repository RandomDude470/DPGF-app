{"ast":null,"code":"import { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  Login(data) {\n    const evaluateResp = resp => {\n      let response = resp;\n      if (response[\"status\"] == \"success\") {\n        return response[\"token\"];\n      } else {\n        return \"bad Login\";\n      }\n    };\n    const OnError = err => {\n      console.log(err);\n      return \"bad Login\";\n    };\n    return firstValueFrom(this.http.post(\"http://127.0.0.1:5500/auth/login\", JSON.stringify(data), {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    })).then(evaluateResp);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["firstValueFrom","AuthService","constructor","http","Login","data","evaluateResp","resp","response","OnError","err","console","log","post","JSON","stringify","headers","then","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Yassir\\Desktop\\web\\Angular-test\\aglo-clone\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient }from '@angular/common/http'\nimport { Observable ,tap,firstValueFrom} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http : HttpClient) { }\n\n  Login( data : Record<string,string>){\n    \n    const evaluateResp = (resp : Object)=>{\n      let response = resp as Record<string,string>\n      if (response[\"status\"]== \"success\") {\n        return response[\"token\"]\n      }else{\n        return \"bad Login\"\n      }\n\n    }\n    const OnError = (err : Error)=>{\n      console.log(err);\n      \n      return \"bad Login\"\n    }\n\n    return firstValueFrom(this.http.post(\"http://127.0.0.1:5500/auth/login\",JSON.stringify(data),{headers : {\"Content-type\" : \"application/json\"}}))\n    .then(evaluateResp)\n\n    \n      \n\n    \n  }\n}\n"],"mappings":"AAEA,SAAyBA,cAAc,QAAO,MAAM;;;AAKpD,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;EAAiB;EAEzCC,KAAKA,CAAEC,IAA4B;IAEjC,MAAMC,YAAY,GAAIC,IAAa,IAAG;MACpC,IAAIC,QAAQ,GAAGD,IAA6B;MAC5C,IAAIC,QAAQ,CAAC,QAAQ,CAAC,IAAG,SAAS,EAAE;QAClC,OAAOA,QAAQ,CAAC,OAAO,CAAC;OACzB,MAAI;QACH,OAAO,WAAW;;IAGtB,CAAC;IACD,MAAMC,OAAO,GAAIC,GAAW,IAAG;MAC7BC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAEhB,OAAO,WAAW;IACpB,CAAC;IAED,OAAOV,cAAc,CAAC,IAAI,CAACG,IAAI,CAACU,IAAI,CAAC,kCAAkC,EAACC,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,EAAC;MAACW,OAAO,EAAG;QAAC,cAAc,EAAG;MAAkB;IAAC,CAAC,CAAC,CAAC,CAC/IC,IAAI,CAACX,YAAY,CAAC;EAMrB;;AA5BWL,WAAW,C;mBAAXA,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXpB,WAAW,C;SAAXA,WAAW;EAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}