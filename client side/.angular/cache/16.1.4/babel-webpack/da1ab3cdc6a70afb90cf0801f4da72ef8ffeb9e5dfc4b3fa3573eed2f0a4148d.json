{"ast":null,"code":"import { Observable, firstValueFrom, catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.AUTH_API_ROUTE = \"http://127.0.0.1:5050/auth\";\n  }\n  Login(data) {\n    return this.http.post(`${this.AUTH_API_ROUTE}/login`, JSON.stringify(data), {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }).pipe(map(resp => {\n      let response = resp;\n      return [response[\"token\"], \"success\"];\n    }), catchError(err => {\n      console.log(err.status);\n      if (err.status == 401) {\n        return of([\"Incorrect email or password\", \"error\"]);\n      } else if (err.status == 404) {\n        return of([\"Url not found Check url Spelling\", \"error\"]);\n      } else if (err.status == 0) {\n        return of([\"Couldnt send Request\", \"error\"]);\n      } else {\n        return of([\"enternal server error\", \"error\"]);\n      }\n    }));\n    return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/login`, JSON.stringify(data), {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    })).then(evaluateResp).catch(OnError);\n  }\n  Validate(Object) {\n    const sendRequest = () => {\n      return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/validate`, JSON.stringify(Object), {\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      }));\n      Validate(Object, Record);\n      Observable < boolean > {\n        return: this.http.post(`${this.AUTH_API_ROUTE}/validate`, JSON.stringify(Object), {\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        }).pipe(map(res => {\n          let record = res;\n          if (record[\"status\"] == \"success\") {\n            return true;\n          } else {\n            return false;\n          }\n        }), catchError(err => {\n          console.log(err.status);\n          return of(false);\n        }))\n      };\n      Register(Object, Record);\n      {\n        const sendRequest = () => {\n          return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/validate`, JSON.stringify(Object), {\n            headers: {\n              'content-type': 'application/json'\n            }\n          }));\n        };\n        const validateResponse = Object => {\n          let record = Object;\n          return [record['token'], 'success'];\n        };\n        const OnError = err => {\n          if (err.status == 409) {\n            return ['Email already in use', 'error'];\n          } else {\n            return ['server error', 'error'];\n          }\n        };\n        return sendRequest().then(validateResponse).catch(OnError);\n      }\n    };\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Observable","firstValueFrom","catchError","map","of","AuthService","constructor","http","AUTH_API_ROUTE","Login","data","post","JSON","stringify","headers","pipe","resp","response","err","console","log","status","then","evaluateResp","catch","OnError","Validate","Object","sendRequest","Record","boolean","return","res","record","Register","validateResponse","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Yassir\\Desktop\\web\\Angular-test\\aglo-clone\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse }from '@angular/common/http'\r\nimport { Observable ,tap,firstValueFrom, catchError, map, from, of} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private AUTH_API_ROUTE:string = \"http://127.0.0.1:5050/auth\";\r\n\r\n  constructor(private http : HttpClient) { }\r\n\r\n  Login( data : Record<string,string>){\r\n\r\n    return this.http.post(`${this.AUTH_API_ROUTE}/login`,JSON.stringify(data),{headers : {\"Content-type\" : \"application/json\"}})\r\n    \r\n    .pipe(\r\n      map((resp)=>{\r\n        let response = resp as Record<string,string>\r\n        return [response[\"token\"],\"success\"]\r\n      }),\r\n      catchError((err : HttpErrorResponse)=>{\r\n        console.log(err.status);\r\n      if (err.status == 401) {\r\n        return of([\"Incorrect email or password\",\"error\"])\r\n      }\r\n      else if (err.status == 404){\r\n        return of([\"Url not found Check url Spelling\",\"error\"])\r\n      }else if(err.status == 0){\r\n        return of([\"Couldnt send Request\",\"error\"])\r\n      }\r\n      else{\r\n        return of([\"enternal server error\",\"error\"])\r\n      }\r\n<<<<<<< HEAD\r\n    }\r\n\r\n    return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/login`,JSON.stringify(data),{headers : {\"Content-type\" : \"application/json\"}}))\r\n          .then(evaluateResp)\r\n          .catch(OnError)\r\n\r\n=======\r\n      })\r\n    )\r\n    \r\n    \r\n    \r\n    \r\n>>>>>>> newbranch\r\n    \r\n      \r\n\r\n    \r\n  }\r\n<<<<<<< HEAD\r\n  Validate(Object : Record<string,string>) : Promise<boolean>{\r\n    const sendRequest = ()=>{\r\n      return firstValueFrom (this.http.post(`${this.AUTH_API_ROUTE}/validate`,JSON.stringify(Object),{headers : {\"Content-type\" : \"application/json\"}}))\r\n=======\r\n>>>>>>> newbranch\r\n\r\n\r\n  Validate(Object : Record<string,string>) : Observable<boolean>{\r\n    return this.http.post(`${this.AUTH_API_ROUTE}/validate`,JSON.stringify(Object),{headers : {\"Content-type\" : \"application/json\"}})\r\n    .pipe(\r\n      map((res)=>{\r\n        let record = res as Record<string,string>\r\n        if (record[\"status\"] == \"success\") {\r\n          return true\r\n        }\r\n        else{\r\n          return false\r\n        }\r\n      }),\r\n      catchError((err : HttpErrorResponse)=>{\r\n        console.log(err.status);\r\n        return of(false)\r\n      })\r\n    )\r\n}\r\n\r\n\r\n\r\n  Register(Object : Record<string,string>){\r\n<<<<<<< HEAD\r\n    const sendRequest = ()=>{\r\n      return firstValueFrom(this.http.post(`${this.AUTH_API_ROUTE}/validate`,JSON.stringify(Object),{headers : { 'content-type' : 'application/json'}}))\r\n    }\r\n    const validateResponse = (Object : Object)=>{\r\n      let record = Object as Record<string,string>\r\n      return [record['token'],'success']\r\n      \r\n    }\r\n    const OnError = (err : HttpErrorResponse)=>{\r\n      \r\n      if (err.status == 409) {\r\n        return ['Email already in use','error']\r\n      } else  {\r\n        return ['server error','error']\r\n      }\r\n    }\r\n    return sendRequest()\r\n    .then(validateResponse)\r\n    .catch(OnError)\r\n=======\r\n\r\n    return this.http.post(`${this.AUTH_API_ROUTE}/register`,JSON.stringify(Object),{headers : {\"Content-type\" : \"application/json\"}})\r\n    \r\n    .pipe(\r\n      map((resp)=>{\r\n        let response = resp as Record<string,string>\r\n        return [response[\"token\"],\"success\"]\r\n      }),\r\n      catchError((err : HttpErrorResponse)=>{\r\n        console.log(err.status);\r\n        if (err.status == 409) {\r\n          return of(['Email already in use','error'])\r\n        } else  {\r\n          return of(['server error','error'])\r\n        }\r\n      })\r\n    )\r\n>>>>>>> newbranch\r\n\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,UAAU,EAAMC,cAAc,EAAEC,UAAU,EAAEC,GAAG,EAAQC,EAAE,QAAO,MAAM;;;AAK/E,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,cAAc,GAAU,4BAA4B;EAEnB;EAEzCC,KAAKA,CAAEC,IAA4B;IAEjC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,cAAc,QAAQ,EAACI,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,EAAC;MAACI,OAAO,EAAG;QAAC,cAAc,EAAG;MAAkB;IAAC,CAAC,CAAC,CAE3HC,IAAI,CACHZ,GAAG,CAAEa,IAAI,IAAG;MACV,IAAIC,QAAQ,GAAGD,IAA6B;MAC5C,OAAO,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAC,SAAS,CAAC;IACtC,CAAC,CAAC,EACFf,UAAU,CAAEgB,GAAuB,IAAG;MACpCC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,MAAM,CAAC;MACzB,IAAIH,GAAG,CAACG,MAAM,IAAI,GAAG,EAAE;QACrB,OAAOjB,EAAE,CAAC,CAAC,6BAA6B,EAAC,OAAO,CAAC,CAAC;OACnD,MACI,IAAIc,GAAG,CAACG,MAAM,IAAI,GAAG,EAAC;QACzB,OAAOjB,EAAE,CAAC,CAAC,kCAAkC,EAAC,OAAO,CAAC,CAAC;OACxD,MAAK,IAAGc,GAAG,CAACG,MAAM,IAAI,CAAC,EAAC;QACvB,OAAOjB,EAAE,CAAC,CAAC,sBAAsB,EAAC,OAAO,CAAC,CAAC;OAC5C,MACG;QACF,OAAOA,EAAE,CAAC,CAAC,uBAAuB,EAAC,OAAO,CAAC,CAAC;;IAGhD,CAAC;IAED,OAAOH,cAAc,CAAC,IAAI,CAACM,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,cAAc,QAAQ,EAACI,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,EAAC;MAACI,OAAO,EAAG;QAAC,cAAc,EAAG;MAAkB;IAAC,CAAC,CAAC,CAAC,CACrIQ,IAAI,CAACC,YAAY,CAAC,CAClBC,KAAK,CAACC,OAAO,CAAC;EAcvB;EAEAC,QAAQA,CAACC,MAA8B;IACrC,MAAMC,WAAW,GAAGA,CAAA,KAAI;MACtB,OAAO3B,cAAc,CAAE,IAAI,CAACM,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,cAAc,WAAW,EAACI,IAAI,CAACC,SAAS,CAACc,MAAM,CAAC,EAAC;QAACb,OAAO,EAAG;UAAC,cAAc,EAAG;QAAkB;MAAC,CAAC,CAAC,CAAC;MAKtJY,QAAQ,CAACC,MAAM,EAAGE,MAAqB,CAAC;MAAG7B,UAAU,GAAC8B,OAAO,GAAC;QAC5DC,MAAM,EAAC,IAAI,CAACxB,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,cAAc,WAAW,EAACI,IAAI,CAACC,SAAS,CAACc,MAAM,CAAC,EAAC;UAACb,OAAO,EAAG;YAAC,cAAc,EAAG;UAAkB;QAAC,CAAC,CAAC,CAChIC,IAAI,CACHZ,GAAG,CAAE6B,GAAG,IAAG;UACT,IAAIC,MAAM,GAAGD,GAA4B;UACzC,IAAIC,MAAM,CAAC,QAAQ,CAAC,IAAI,SAAS,EAAE;YACjC,OAAO,IAAI;WACZ,MACG;YACF,OAAO,KAAK;;QAEhB,CAAC,CAAC,EACF/B,UAAU,CAAEgB,GAAuB,IAAG;UACpCC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,MAAM,CAAC;UACvB,OAAOjB,EAAE,CAAC,KAAK,CAAC;QAClB,CAAC,CAAC;OAEP;MAIC8B,QAAQ,CAACP,MAAM,EAAGE,MAAqB,CAAC;MAAA;QAEtC,MAAMD,WAAW,GAAGA,CAAA,KAAI;UACtB,OAAO3B,cAAc,CAAC,IAAI,CAACM,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,cAAc,WAAW,EAACI,IAAI,CAACC,SAAS,CAACc,MAAM,CAAC,EAAC;YAACb,OAAO,EAAG;cAAE,cAAc,EAAG;YAAkB;UAAC,CAAC,CAAC,CAAC;QACpJ,CAAC;QACD,MAAMqB,gBAAgB,GAAIR,MAAe,IAAG;UAC1C,IAAIM,MAAM,GAAGN,MAA+B;UAC5C,OAAO,CAACM,MAAM,CAAC,OAAO,CAAC,EAAC,SAAS,CAAC;QAEpC,CAAC;QACD,MAAMR,OAAO,GAAIP,GAAuB,IAAG;UAEzC,IAAIA,GAAG,CAACG,MAAM,IAAI,GAAG,EAAE;YACrB,OAAO,CAAC,sBAAsB,EAAC,OAAO,CAAC;WACxC,MAAO;YACN,OAAO,CAAC,cAAc,EAAC,OAAO,CAAC;;QAEnC,CAAC;QACD,OAAOO,WAAW,EAAE,CACnBN,IAAI,CAACa,gBAAgB,CAAC,CACtBX,KAAK,CAACC,OAAO,CAAC;;IAsBnB,CAAC;EACD;;AAxHapB,WAAW,C;mBAAXA,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXlC,WAAW,C;SAAXA,WAAW;EAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}