{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  Login(data) {\n    const sendRequest = () => {\n      return this.http.post(\"http://127.0.0.1:5500/auth/login\", JSON.stringify(data), {\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n    };\n    const subscribe = observable => {\n      return observable.subscribe(response => {\n        return response;\n      });\n    };\n    const response = resp => {\n      if (resp[\"status\"] == \"success\") {\n        return resp[\"token\"];\n      } else {\n        return undefined;\n      }\n    };\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","http","Login","data","sendRequest","post","JSON","stringify","headers","subscribe","observable","response","resp","undefined","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Yassir\\Desktop\\web\\Angular-test\\aglo-clone\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient }from '@angular/common/http'\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http : HttpClient) { }\n\n  Login( data : Record<string,string>){\n    const sendRequest = ()=>{\n      return this.http.post(\"http://127.0.0.1:5500/auth/login\",JSON.stringify(data),{headers : {\"Content-type\" : \"application/json\"}})\n\n    }\n    const subscribe = (observable : Observable<JSON>)=>{\n      return observable.subscribe((response)=>{\n        return response\n      })\n    }\n    const response = (resp : Record<string,string>)=>{\n      if (resp[\"status\"] == \"success\"){\n        return resp[\"token\"]\n\n      }else{\n        return undefined\n      }\n    }\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;EAAiB;EAEzCC,KAAKA,CAAEC,IAA4B;IACjC,MAAMC,WAAW,GAAGA,CAAA,KAAI;MACtB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,kCAAkC,EAACC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,EAAC;QAACK,OAAO,EAAG;UAAC,cAAc,EAAG;QAAkB;MAAC,CAAC,CAAC;IAElI,CAAC;IACD,MAAMC,SAAS,GAAIC,UAA6B,IAAG;MACjD,OAAOA,UAAU,CAACD,SAAS,CAAEE,QAAQ,IAAG;QACtC,OAAOA,QAAQ;MACjB,CAAC,CAAC;IACJ,CAAC;IACD,MAAMA,QAAQ,GAAIC,IAA4B,IAAG;MAC/C,IAAIA,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAS,EAAC;QAC9B,OAAOA,IAAI,CAAC,OAAO,CAAC;OAErB,MAAI;QACH,OAAOC,SAAS;;IAEpB,CAAC;EACH;;AAtBWd,WAAW,C;mBAAXA,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXlB,WAAW,C;SAAXA,WAAW;EAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}